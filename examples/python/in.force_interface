# example with unique grid type

variable        nfreq equal 1 # how frequently to run fix (should be every step)
variable        ngrid equal 3 # how many grid points
variable        nthermo equal 1 #frequency for printing thermodynamic data
variable        nrep index 3 # number of repeated unit cells for Ca
variable        a index 4.1 # fake lattice constant
variable        fdelta index 1.0e-5 # displacement size
variable        nugget equal 1.0e-12 # regularization for relerr
variable        ndump index 50     # dump output interval

units           metal
atom_modify     map hash

variable        nx equal ${nrep}
variable        ny equal ${nrep}
variable        nz equal ${nrep}

boundary        p p p

#make a fictitious system to test grid force calculations
lattice         custom $a &
        a1 1 0 0 &
        a2 0 1 0  &
        a3 0 0 1 &
        basis 0.01 0.01 0.01 

region          box block 0 ${nx} 0 ${ny} 0 ${nz}
create_box      1 box
create_atoms    1 box basis 1 1

mass            1 35.453

group           acegroup type 1
variable        rcutfac equal 6.0 # define rcutfac for pairstyle_zero (must be bigger than radial cutoffs in coupling_coefficients.yace


variable        ace_options string "coupling_coefficients.yace ugridtype 1"

displace_atoms  all random 0.01 0.01 0.01 3542

pair_style      zero ${rcutfac} # null pairstyle so that lammps will still evolve system in time
pair_coeff      * *

timestep        0.5e-3
neighbor        0.3 bin
neigh_modify    every 1 delay 0 check yes


#define lammps python command
python          pre_force_callback file betas_python.py

fix             4 all python/acegridforce ${nfreq} pre_force pre_force_callback grid ${ngrid} ${ngrid} ${ngrid} ${ace_options} 
fix_modify      4 energy yes

thermo          ${nthermo}

# add numdiff (numerical differentiation) forces to validate fix python/gridforceace
fix             numforce all numdiff ${nfreq} ${fdelta}
variable        ferrx atom f_numforce[1]-fx
variable        ferry atom f_numforce[2]-fy
variable        ferrz atom f_numforce[3]-fz
variable        fnumx atom f_numforce[1]
variable        fnumy atom f_numforce[2]
variable        fnumz atom f_numforce[3]
variable        ferrsq atom v_ferrx^2+v_ferry^2+v_ferrz^2
compute         faverrsq all reduce ave v_ferrsq
variable        fsq atom fx^2+fy^2+fz^2
compute         favsq all reduce ave v_fsq
variable        frelerr equal sqrt(c_faverrsq/(c_favsq+${nugget}))
dump errors     all custom ${ndump} force_error.dump v_ferrx v_ferry v_ferrz v_fnumx v_fnumy v_fnumz fx fy fz


thermo_style    custom step temp pe etotal press v_frelerr c_faverrsq c_favsq 

run             0
